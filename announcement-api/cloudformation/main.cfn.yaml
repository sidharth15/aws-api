AWSTemplateFormatVersion: "2010-09-09"
Resources:
  AnnouncementsTable:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "https://sidharthramesh.s3-eu-west-1.amazonaws.com/db.cfn.yaml"

  LambdaFunctionIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: DynamoDbCloudWatchAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents" 
                Resource: '*'
              
              - Effect: Allow
                Action: "dynamodb:*"
                Resource: "*"
      RoleName: LambdaToDynamoDbAccessRole
  
  PutAnnouncementLambdaFunction:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "https://sidharthramesh.s3-eu-west-1.amazonaws.com/common/lambda_function.cfn.yaml"
      Parameters:
        FunctionName: "put_announcements"
        FunctionHandler: "PutAnnouncement.lambda_handler"
        FunctionRoleArn: !GetAtt LambdaFunctionIAMRole.Arn
        S3Bucket: "sidharthramesh"
        S3Key: "PutAnnouncement.zip"
        ErrorReportingLambdaFunctionArn:
          Fn::GetAtt:
            - ErrorReportingStack
            - Outputs.ErrorReportingLambdaFunctionArn
        ErrorReportingLambdaFunctionName:
          Fn::GetAtt:
            - ErrorReportingStack
            - Outputs.ErrorReportingLambdaFunctionName

  ErrorReportingStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "https://sidharthramesh.s3-eu-west-1.amazonaws.com/error_reporting.cfn.yaml"

  PutAnnouncementApi:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "https://sidharthramesh.s3-eu-west-1.amazonaws.com/api.cfn.yaml"
      Parameters:
        LambdaFunctionName: 
          Fn::GetAtt:
            - PutAnnouncementLambdaFunction
            - Outputs.FunctionName
        LambdaFunctionArn:
          Fn::GetAtt:
            - PutAnnouncementLambdaFunction
            - Outputs.FunctionArn
    
  ListAnnouncementsLambdaFunction:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "https://sidharthramesh.s3-eu-west-1.amazonaws.com/common/lambda_function.cfn.yaml"
      Parameters:
        FunctionName: "list_announcements"
        FunctionHandler: "ListAnnouncements.lambda_handler"
        FunctionRoleArn: !GetAtt LambdaFunctionIAMRole.Arn
        S3Bucket: "sidharthramesh"
        S3Key: "ListAnnouncements.zip"
        ErrorReportingLambdaFunctionArn:
          Fn::GetAtt:
            - ErrorReportingStack
            - Outputs.ErrorReportingLambdaFunctionArn
        ErrorReportingLambdaFunctionName:
          Fn::GetAtt:
            - ErrorReportingStack
            - Outputs.ErrorReportingLambdaFunctionName
    
  ListAnnouncementsAPI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "https://sidharthramesh.s3-eu-west-1.amazonaws.com/list_announcements_api.cfn.yaml"
      Parameters:
        LambdaFunctionName: 
          Fn::GetAtt:
            - ListAnnouncementsLambdaFunction
            - Outputs.FunctionName
        LambdaFunctionArn:
          Fn::GetAtt:
            - ListAnnouncementsLambdaFunction
            - Outputs.FunctionArn

Outputs:
  PutAnnouncementEndpointURL:
    Description: "Endpoint URL for put-announcement API exposed by API Gateway"
    Value: 
      Fn::GetAtt:
        - PutAnnouncementApi
        - Outputs.ApiUrl

  ListAnnouncementsEndpointURL:
    Description: "Endpoint URL for list-announcements API exposed by API Gateway"
    Value: 
      Fn::GetAtt:
        - ListAnnouncementsAPI
        - Outputs.ApiUrl